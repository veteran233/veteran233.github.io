<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CCPC 2020 秦皇岛 E - Exam Results</title>
    <url>/2020/10/20/ccpc2020qhd/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p>Professor Alex is preparing an exam for his students now.</p>
<p>There will be $n$ students participating in this exam. If student $i$ has a good mindset, he/she will perform well and get $a_i$ points. Otherwise, he/she will get $b_i$ points. So it is impossible to predict the exam results. Assume the highest score of these students is $x$ points. The students with a score of no less than $x⋅p\%$ will pass the exam.</p>
<p>Alex needs to know what is the maximum number of students who can pass the exam in all situations. Can you answer his question?</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>（待完善）</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">array</span>&lt;<span class="built_in">pair</span>&lt;ll, ll&gt;, maxn&gt; a;</span><br><span class="line"><span class="built_in">array</span>&lt;ll, maxn&gt; count1;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;ll, ll&gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll T, test = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		ll n, p;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p;</span><br><span class="line"></span><br><span class="line">		b.clear();</span><br><span class="line">		<span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i].first &gt;&gt; a[i].second;</span><br><span class="line">			<span class="keyword">if</span> (a[i].first &gt; a[i].second) swap(a[i].first, a[i].second);</span><br><span class="line">			b.push_back(&#123; a[i].first,i &#125;);</span><br><span class="line">			b.push_back(&#123; a[i].second,i &#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		sort(a.begin(), a.begin() + n);</span><br><span class="line">		sort(b.begin(), b.end());</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(&amp;count1, <span class="number">0</span>, <span class="number">8</span> * n);</span><br><span class="line"></span><br><span class="line">		ll cnt = <span class="number">0</span>, ans = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; b.size(); ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			++count1[b[i].second];</span><br><span class="line">			<span class="keyword">if</span> (count1[b[i].second] == <span class="number">1</span>) ++cnt;</span><br><span class="line">			<span class="keyword">if</span> (b[i].first &lt; a[n - <span class="number">1</span>].first) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> (j &lt;= i &amp;&amp; b[j].first * <span class="number">100</span> &lt; b[i].first * p)</span><br><span class="line">			&#123;</span><br><span class="line">				--count1[b[j].second];</span><br><span class="line">				<span class="keyword">if</span> (!count1[b[j++].second]) --cnt;</span><br><span class="line">			&#125;</span><br><span class="line">			ans = max(ans, cnt);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; test++ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ccpc</tag>
        <tag>尺取</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Raif Round 1 - D - Bouncing Boomerangs</title>
    <url>/2020/10/21/cf1428-d/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://codeforces.com/contest/1428/problem/D">https://codeforces.com/contest/1428/problem/D</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>构造，对于每一个$a_i$，考虑$a_j(1 \leq j &lt;i)$与$a_i$配对，2与1配成一对，3与3、2和1配成一对。如果存在2或者3没有相应的$a_i$与之配对，则输出-1。否则输出每一对的坐标。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">array</span>&lt;ll, maxn&gt; tar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">deque</span>&lt;ll&gt; p2, p3;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;ll, ll&gt;&gt; comb;</span><br><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; tar[i];</span><br><span class="line">		<span class="keyword">if</span> (tar[i] == <span class="number">2</span>) p2.push_back(i);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (tar[i] == <span class="number">3</span>) p3.push_back(i);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (tar[i] == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!p2.empty())</span><br><span class="line">			&#123;</span><br><span class="line">				comb.push_back(&#123; *p2.begin(),i &#125;);</span><br><span class="line">				p2.pop_front();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!p3.empty())</span><br><span class="line">			&#123;</span><br><span class="line">				comb.push_back(&#123; *p3.begin(),i &#125;);</span><br><span class="line">				p3.pop_front();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				comb.push_back(&#123; i,i &#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (tar[i] == <span class="number">2</span> &amp;&amp; !p3.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			comb.push_back(&#123; *p3.begin(),i &#125;);</span><br><span class="line">			p3.pop_front();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (tar[i] == <span class="number">3</span> &amp;&amp; !p3.empty() &amp;&amp; *p3.begin() != i)</span><br><span class="line">		&#123;</span><br><span class="line">			comb.push_back(&#123; *p3.begin(),i &#125;);</span><br><span class="line">			p3.pop_front();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!p2.empty() || !p3.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (comb.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ll level = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : comb)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (tar[i.first] == <span class="number">1</span>) ++ans;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (tar[i.first] == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ans += <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (tar[i.first] == <span class="number">3</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (tar[i.second] == <span class="number">1</span>) ans += <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (tar[i.second] == <span class="number">2</span> || tar[i.second] == <span class="number">3</span>) ans += <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : comb)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (tar[i.first] == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; level &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			++level;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (tar[i.first] == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; level &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; level &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			++level;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (tar[i.first] == <span class="number">3</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (tar[i.second] == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; level &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; level &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; level + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				level += <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (tar[i.second] == <span class="number">2</span> || tar[i.second] == <span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; level &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; level &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				++level;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cf</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 677 - F - Zero Remainder Sum</title>
    <url>/2020/10/24/cf1433-f/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://codeforces.com/contest/1433/problem/F">https://codeforces.com/contest/1433/problem/F</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>dp，设$dp(x,y,cnt,rem)$，$x,y,cnt,rem$分别代表行、列、选择的个数和$k$的余数。<br>对于$a_{x,y}$，有两种选择：选或不选。对应的转移方程为：</p>
<script type="math/tex; mode=display">
不选\qquad dp(x,y,cnt,rem)\leftarrow\max(dp(x,y,cnt,rem),dp(x,y-1,cnt,rem))</script><script type="math/tex; mode=display">
选\qquad\left\{
\begin{aligned}
&t=(rem+a_{x,y})\mod \ k\\
&dp(x,y,cnt+1,t)\leftarrow\max(dp(x,y,cnt+1,t),dp(x,y,cnt,rem)+a_{x,y})
\end{aligned}
\right.</script><p>除了$dp(1,0,0,0)$初始化为0，其余$dp(x,y,cnt,rem)$初始为$-\infty$，答案为$\max\limits_{0\leq i\leq\lfloor\frac{m}{2}\rfloor}(dp(n,m,i,0))$</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> db;</span><br><span class="line"></span><br><span class="line">ll a[<span class="number">75</span>][<span class="number">75</span>], dp[<span class="number">75</span>][<span class="number">75</span>][<span class="number">75</span>][<span class="number">75</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll n, m, k;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">		<span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; <span class="number">75</span>; ++i)</span><br><span class="line">		<span class="keyword">for</span> (ll j = <span class="number">0</span>; j &lt; <span class="number">75</span>; ++j)</span><br><span class="line">			<span class="keyword">for</span> (ll x = <span class="number">0</span>; x &lt; <span class="number">75</span>; ++x)</span><br><span class="line">				<span class="keyword">for</span> (ll y = <span class="number">0</span>; y &lt; <span class="number">75</span>; ++y)</span><br><span class="line">					dp[i][j][x][y] = <span class="number">-1e12</span>;</span><br><span class="line"></span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (ll x = <span class="number">1</span>; x &lt;= n; ++x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (ll y = <span class="number">1</span>; y &lt;= m; ++y)</span><br><span class="line">			<span class="keyword">for</span> (ll cnt = <span class="number">0</span>; cnt &lt;= m / <span class="number">2</span>; ++cnt)</span><br><span class="line">				<span class="keyword">for</span> (ll rem = <span class="number">0</span>; rem &lt; k; ++rem)</span><br><span class="line">				&#123;</span><br><span class="line">					dp[x][y][cnt][rem] = max(dp[x][y][cnt][rem], dp[x][y - <span class="number">1</span>][cnt][rem]);</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (cnt + <span class="number">1</span> &lt;= m / <span class="number">2</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						ll t = (rem + a[x][y]) % k;</span><br><span class="line">						dp[x][y][cnt + <span class="number">1</span>][t] = max(dp[x][y][cnt + <span class="number">1</span>][t], dp[x][y - <span class="number">1</span>][cnt][rem] + a[x][y]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; n)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (ll cnt = <span class="number">0</span>; cnt &lt;= m / <span class="number">2</span>; ++cnt)</span><br><span class="line">				<span class="keyword">for</span> (ll rem = <span class="number">0</span>; rem &lt; k; ++rem)</span><br><span class="line">					dp[x + <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][rem] = max(dp[x + <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][rem], dp[x][m][cnt][rem]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt;= m / <span class="number">2</span>; ++i) ans = max(ans, dp[n][m][i][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cf</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 678 - C - Binary Search</title>
    <url>/2020/10/25/cf1436-c/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://codeforces.com/contest/1436/problem/C">https://codeforces.com/contest/1436/problem/C</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>考虑二分搜索的过程中$left$和$right$的变化情况，当$a[middle]\leq x$时，$left$会变化；否则$right$会变化。令$lt$，$gt$分别代表$a[middle]\lt x$、$a[middle]\gt x$的次数。由组合数学知识得：</p>
<script type="math/tex; mode=display">
C_{n-x}^{gt}A_{gt}^{gt}C_{x-1}^{lt}A_{lt}^{lt}A_{n-1-lt-gt}^{n-1-lt-gt}</script><p>其中$n-x$为大于$x$的个数，$x-1$为小于$x$的个数，注意对$10^9+7$取模。<br>由于组合数取模需要用到乘法逆元，附上oi-wiki关于乘法逆元的介绍：<a href="https://oi-wiki.org/math/inverse/">https://oi-wiki.org/math/inverse/</a></p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> db;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span> </span>&#123; <span class="keyword">if</span> (!b) &#123; x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span> a; &#125;ll d = exgcd(b, a % b, x, y); ll t = x; x = y; y = t - (a / b) * y; <span class="keyword">return</span> d; &#125;</span><br><span class="line"><span class="function">ll <span class="title">getInv</span><span class="params">(ll a, ll mod)</span> </span>&#123; ll x, y; <span class="keyword">return</span> exgcd(a, mod, x, y) == <span class="number">1</span> ? (x % mod + mod) % mod : <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">2005</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll fact[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_fact</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	fact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; <span class="number">2005</span>; ++i)</span><br><span class="line">		fact[i] = (fact[i - <span class="number">1</span>] * i) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">comb</span><span class="params">(ll n, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (fact[n] * getInv((fact[r] * fact[n - r]) % mod, mod)) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	make_fact();</span><br><span class="line">	ll n, x, pos, gt = <span class="number">0</span>, lt = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; pos;</span><br><span class="line"></span><br><span class="line">	ll l = <span class="number">0</span>, r = n, mid;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (mid &lt;= pos)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (mid != pos) ++lt;</span><br><span class="line">			l = mid + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> ++gt, r = mid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (n - x &lt; gt || x - <span class="number">1</span> &lt; lt);</span><br><span class="line">	<span class="keyword">else</span> ans = (((((((comb(n - x, gt) * fact[gt]) % mod) * comb(x - <span class="number">1</span>, lt)) % mod) * fact[lt]) % mod) * fact[n - lt - gt - <span class="number">1</span>]) % mod;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cf</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 97 - C - Chef Monocarp</title>
    <url>/2020/10/28/cf1437-c/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://codeforces.com/contest/1437/problem/C">https://codeforces.com/contest/1437/problem/C</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>dp，先对$a_i$升序排序，设$dp(i,j)$，$i$为前$a_i$的情况，$j$为选择减去的数字。初始化$dp(i,0)$为$\infty$（因为不能取0），状态转移方程$dp(i,j)\leftarrow\max(dp(i,j-1),dp(i-1,j-1)+abs(a_i-j))$。<br>注意$j$可能的取值，考虑$n,t$最大为200，则$j$最大取值为$200+199=399$，这里取405。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line">ll n, a[<span class="number">205</span>], dp[<span class="number">205</span>][<span class="number">405</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		sort(a, a + n);</span><br><span class="line">		<span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; ++i) dp[i][<span class="number">0</span>] = <span class="number">1e12</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; <span class="number">405</span>; ++i)</span><br><span class="line">			dp[<span class="number">0</span>][i] = min(dp[<span class="number">0</span>][i - <span class="number">1</span>], <span class="built_in">abs</span>(a[<span class="number">0</span>] - i));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt; <span class="number">405</span>; ++j)</span><br><span class="line">			&#123;</span><br><span class="line">				dp[i][j] = min(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="built_in">abs</span>(a[i] - j));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; dp[n - <span class="number">1</span>][<span class="number">405</span> - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cf</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>The 17th Zhejiang Provincial Collegiate Programming Contest - A - AD 2020</title>
    <url>/2020/11/24/cfgym102770-a/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://codeforces.com/gym/102770/problem/A">https://codeforces.com/gym/102770/problem/A</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>大模拟，注意要使用前缀和，否则会T</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> leapyear[<span class="number">10005</span>], a_year[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">bool</span> is31[<span class="number">13</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line">ll sum[<span class="number">10005</span>], l_mon[<span class="number">13</span>], n_mon[<span class="number">13</span>];</span><br><span class="line"><span class="function">ll <span class="title">ss</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res *= <span class="number">10</span>;</span><br><span class="line">        res += x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2000</span>; i &lt;= <span class="number">9999</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i / <span class="number">10</span> == <span class="number">202</span> || ss(i) == <span class="number">202</span>) a_year[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">400</span> == <span class="number">0</span> || (i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">100</span> != <span class="number">0</span>)) leapyear[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2000</span>; i &lt;= <span class="number">9999</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a_year[i]) sum[i] += leapyear[i] ? <span class="number">366</span> : <span class="number">365</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">2</span>) sum[i] += leapyear[i] ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">            <span class="keyword">else</span> ++sum[i];</span><br><span class="line">            ++sum[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) l_mon[i] = <span class="number">29</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (is31[i]) l_mon[i] = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">else</span> l_mon[i] = <span class="number">30</span>;</span><br><span class="line">        l_mon[i] += l_mon[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) n_mon[i] = <span class="number">28</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (is31[i]) n_mon[i] = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">else</span> n_mon[i] = <span class="number">30</span>;</span><br><span class="line">        n_mon[i] += n_mon[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(ll m1, ll d1, ll m2, ll d2, ll m, ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m1 &lt; m &amp;&amp; m &lt; m2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (m1 &lt; m &amp;&amp; m == m2 &amp;&amp; d &lt;= d2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (m1 == m &amp;&amp; m &lt; m2 &amp;&amp; d &gt;= d1) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (m1 == m2 &amp;&amp; m1 == m &amp;&amp; d1 &lt;= d &amp;&amp; d &lt;= d2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">cul</span><span class="params">(ll y, ll m1, ll d1, ll m2, ll d2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (m1 &lt; m2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (leapyear[y]) <span class="keyword">if</span> (m2 - <span class="number">1</span> &gt;= m1) res += l_mon[m2 - <span class="number">1</span>] - l_mon[m1];</span><br><span class="line">        <span class="keyword">if</span> (!leapyear[y]) <span class="keyword">if</span> (m2 - <span class="number">1</span> &gt;= m1) res += n_mon[m2 - <span class="number">1</span>] - n_mon[m1];</span><br><span class="line">        <span class="keyword">if</span> (m1 == <span class="number">2</span>) res += (leapyear[y] ? <span class="number">29</span> : <span class="number">28</span>) - d1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> res += (is31[m1] ? <span class="number">31</span> : <span class="number">30</span>) - d1 + <span class="number">1</span>;</span><br><span class="line">        res += d2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> res += d2 - d1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    ll T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll y1, m1, d1, y2, m2, d2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld%lld%lld&quot;</span>, &amp;y1, &amp;m1, &amp;d1, &amp;y2, &amp;m2, &amp;d2);</span><br><span class="line"></span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (y2 - <span class="number">1</span> &gt;= y1) ans += sum[y2 - <span class="number">1</span>] - sum[y1];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y1 != y2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a_year[y1]) ans += cul(y1, m1, d1, <span class="number">12</span>, <span class="number">31</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (y1 % <span class="number">10</span> == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m1 &lt; <span class="number">2</span>) ans += leapyear[y1] ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (m1 == <span class="number">2</span>) ans += (leapyear[y1] ? <span class="number">29</span> : <span class="number">28</span>) - d1 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (judge(m1, d1, <span class="number">12</span>, <span class="number">31</span>, <span class="number">2</span>, <span class="number">2</span>)) ++ans;</span><br><span class="line">                <span class="keyword">if</span> (judge(m1, d1, <span class="number">12</span>, <span class="number">31</span>, <span class="number">12</span>, <span class="number">2</span>)) ++ans;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a_year[y2]) ans += cul(y2, <span class="number">1</span>, <span class="number">1</span>, m2, d2);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (y2 % <span class="number">10</span> == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m2 &gt; <span class="number">2</span>) ans += leapyear[y2] ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (m2 == <span class="number">2</span>) ans += d2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (judge(<span class="number">1</span>, <span class="number">1</span>, m2, d2, <span class="number">2</span>, <span class="number">2</span>)) ++ans;</span><br><span class="line">                <span class="keyword">if</span> (judge(<span class="number">1</span>, <span class="number">1</span>, m2, d2, <span class="number">12</span>, <span class="number">2</span>)) ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a_year[y1]) ans += cul(y1, m1, d1, m2, d2);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (y1 % <span class="number">10</span> == <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m1 &lt; <span class="number">2</span> &amp;&amp; <span class="number">2</span> &lt; m2) ans += leapyear[y1] ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (m1 == <span class="number">2</span> &amp;&amp; m2 &gt; <span class="number">2</span>) ans += (leapyear[y1] ? <span class="number">29</span> : <span class="number">28</span>) - d1 + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (m1 &lt; <span class="number">2</span> &amp;&amp; m2 == <span class="number">2</span>) ans += d2;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (m1 == m2 &amp;&amp; m1 == <span class="number">2</span>) ans += d2 - d1 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (judge(m1, d1, m2, d2, <span class="number">2</span>, <span class="number">2</span>)) ++ans;</span><br><span class="line">                <span class="keyword">if</span> (judge(m1, d1, m2, d2, <span class="number">12</span>, <span class="number">2</span>)) ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 - 逆序对</title>
    <url>/2020/12/02/luogu_p1908/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://www.luogu.com.cn/problem/P1908">https://www.luogu.com.cn/problem/P1908</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>权值树状数组，权值线段树模板题，注意要离散化。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>权值树状数组<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) x&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) (x&lt;&lt;1)|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line">ll n, a[maxn], b[maxn], tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        ++tree[p];</span><br><span class="line">        p += lowbit(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res += tree[p];</span><br><span class="line">        p -= lowbit(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], b[i] = a[i];</span><br><span class="line"></span><br><span class="line">    sort(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">    ll len = unique(b + <span class="number">1</span>, b + <span class="number">1</span> + n) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll t = lower_bound(b + <span class="number">1</span>, b + <span class="number">1</span> + len, a[i]) - b;</span><br><span class="line">        a[i] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += query(len) - query(a[i]);</span><br><span class="line">        update(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>权值线段树写法1<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) x&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) (x&lt;&lt;1)|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line">ll n, a[maxn], b[maxn], tree[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[p] = tree[lson(p)] + tree[rson(p)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll s, ll t, ll p, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == t)</span><br><span class="line">    &#123;</span><br><span class="line">        ++tree[p];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid = (s + t) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) update(s, mid, lson(p), x);</span><br><span class="line">    <span class="keyword">else</span> update(mid + <span class="number">1</span>, t, rson(p), x);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll l, ll r, ll s, ll t, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[p];</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid = (s + t) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) res += query(l, r, s, mid, lson(p));</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) res += query(l, r, mid + <span class="number">1</span>, t, rson(p));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], b[i] = a[i];</span><br><span class="line"></span><br><span class="line">    sort(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">    ll len = unique(b + <span class="number">1</span>, b + <span class="number">1</span> + n) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll t = lower_bound(b + <span class="number">1</span>, b + <span class="number">1</span> + len, a[i]) - b;</span><br><span class="line">        a[i] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += query(a[i] + <span class="number">1</span>, len, <span class="number">1</span>, len, <span class="number">1</span>);</span><br><span class="line">        update(<span class="number">1</span>, len, <span class="number">1</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>权值线段树写法2<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) x&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) (x&lt;&lt;1)|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll l, r, v;</span><br><span class="line">&#125;node[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">ll n, a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[p].v = node[lson(p)].v + node[rson(p)].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll s, ll t, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[p].l = s;</span><br><span class="line">    node[p].r = t;</span><br><span class="line">    node[p].v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s == t) <span class="keyword">return</span>;</span><br><span class="line">    ll mid = (s + t) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(s, mid, lson(p));</span><br><span class="line">    build(mid + <span class="number">1</span>, t, rson(p));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll p, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node[p].l == node[p].r)</span><br><span class="line">    &#123;</span><br><span class="line">        ++node[p].v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid = (node[p].l + node[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) update(lson(p), x);</span><br><span class="line">    <span class="keyword">else</span> update(rson(p), x);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll l, ll r, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= node[p].l &amp;&amp; node[p].r &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].v;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid = (node[p].l + node[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) res += query(l, r, lson(p));</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) res += query(l, r, rson(p));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], b[i] = a[i];</span><br><span class="line"></span><br><span class="line">    sort(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">    ll len = unique(b + <span class="number">1</span>, b + <span class="number">1</span> + n) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll t = lower_bound(b + <span class="number">1</span>, b + <span class="number">1</span> + len, a[i]) - b;</span><br><span class="line">        a[i] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += query(a[i] + <span class="number">1</span>, len, <span class="number">1</span>);</span><br><span class="line">        update(<span class="number">1</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>洛谷</tag>
        <tag>树状数组</tag>
        <tag>线段树</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客 - 区间的连续段</title>
    <url>/2020/11/22/nowcoder_15429/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://ac.nowcoder.com/acm/problem/15429">https://ac.nowcoder.com/acm/problem/15429</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>倍增模板题</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line">ll n, m, k, a[maxn], f[maxn][<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; <span class="number">25</span>; ++i) f[n + <span class="number">1</span>][i] = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = n; i &gt; <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll p = upper_bound(a + i, a + <span class="number">1</span> + n, a[i - <span class="number">1</span>] + k) - a;</span><br><span class="line">        f[i][<span class="number">0</span>] = p;</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt; <span class="number">25</span>; ++j) f[i][j] = f[f[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l, r, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">24</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> (f[l][i] &lt;= r) l = f[l][i], ans += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">        <span class="keyword">if</span> (f[l][<span class="number">0</span>] &gt; r) <span class="built_in">cout</span> &lt;&lt; ans + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Chtholly&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>2020ICPC·小米 网络选拔赛第二场 - D - Determinant</title>
    <url>/2020/11/01/nowcoder_7502-d/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://ac.nowcoder.com/acm/contest/7502/D">https://ac.nowcoder.com/acm/contest/7502/D</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>回忆一下线性代数的知识，用升阶法得：</p>
<script type="math/tex; mode=display">
\left|\begin{array}{cccc}
x+a_{1} b_{1} & a_{1} b_{2} & \cdots & a_{1} b_{n} \\
a_{2} b_{1} & x+a_{2} b_{2} & \cdots & a_{2} b_{n} \\
\vdots & \vdots & \ddots & \vdots \\
a_{n} b_{1} & a_{n} b_{2} & \cdots & x+a_{n} b_{n}
\end{array}\right|
\rightarrow
\frac{1}{x}\left|\begin{array}{ccccc}
x & b_{1} & b_{2} & \cdots & b_{n} \\
0 & x+a_{1} b_{1} & a_{1} b_{2} & \cdots & a_{1} b_{n} \\
0 & a_{2} b_{1} & x+a_{2} b_{2} & \cdots & a_{2} b_{n} \\
\vdots & \vdots & \vdots & \ddots & \vdots \\
0 & a_{n} b_{1} & a_{n} b_{2} & \cdots & x+a_{n} b_{n}
\end{array}\right|
\rightarrow</script><script type="math/tex; mode=display">
\frac{1}{x}\left|\begin{array}{ccccc}
x & b_{1} & b_{2} & \cdots & b_{n} \\
-x a_{1} & x & 0 & \cdots & 0 \\
-x a_{2} & 0 & x & \cdots & 0 \\
\vdots & \vdots & \vdots & \ddots & \vdots \\
-x a_{n} & 0 & 0 & \cdots & x
\end{array}\right|
\rightarrow
\frac{1}{x}\begin{array}{|ccccc|}
x+a_{1} b_{1}+a_{2} b_{2}+\cdots+a_{n} b_{n} & b_{1} & b_{2} & \cdots & b_{n} \\
0 & x & 0 & \cdots & 0 \\
0 & 0 & x & \cdots & 0 \\
\vdots & \vdots & \vdots & \ddots & \vdots \\
0 & 0 & 0 & \cdots & x
\end{array}</script><p>答案为$\left(x+a_{1} b_{1}+a_{2} b_{2}+\cdots+a_{n} b_{n}\right) x^{n-1}$。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">fpow</span><span class="params">(ll a, ll b, ll mod)</span> </span>&#123; <span class="keyword">if</span> (b &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; ll res = <span class="number">1</span>; <span class="keyword">while</span> (b) &#123; <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (res * a) % mod; a = (a * a) % mod; b &gt;&gt;= <span class="number">1</span>; &#125;<span class="keyword">return</span> res; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll n, x, a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">        ll ans = x;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = (ans + ((a[i] * b[i]) % mod)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans * fpow(x, n - <span class="number">1</span>, mod)) % mod;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>牛客</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客 - Matrix</title>
    <url>/2020/12/10/nowcoder_51003/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://ac.nowcoder.com/acm/problem/51003">https://ac.nowcoder.com/acm/problem/51003</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>两次hash，对于M行N列的矩阵arr，对每一行进行一次hash，得到h；然后对于列，取长度为B的hash，即$h[i][r]-h[i][l-1]\times bash^B$，对每一列再用一次hash，得到h2。此时的$h2[i+a-1]-h2[i-1]\times bash2^A$即为小矩阵（该矩阵的左上角位于i行j列，右下角位于(i+a-1)行(j+b-1)列）的hash，简单来说就是把字符串的hash搬到了矩阵上来，使之变成矩阵的hash，这样每一个矩阵都对应唯一的一个hash值。<br>特别注意的是，该题不能用set来保存矩阵的hash，否则会MLE，必须使用数组保存然后排序。对于Q个询问，用二分查找判断是否存在于数组中，是则输出1，否则输出0。推荐用stl里的binary_search。<br><del>我不会告诉你我用lower_bound，然后wa了3发</del></p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span> </span>&#123; <span class="keyword">if</span> (!b) &#123; x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span> a; &#125;ll d = exgcd(b, a % b, x, y); ll t = x; x = y; y = t - (a / b) * y; <span class="keyword">return</span> d; &#125;</span><br><span class="line"><span class="function">ll <span class="title">getInv</span><span class="params">(ll a, ll mod)</span> </span>&#123; ll x, y; <span class="keyword">return</span> exgcd(a, mod, x, y) == <span class="number">1</span> ? (x % mod + mod) % mod : <span class="number">-1</span>; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> type&gt;<span class="function">type <span class="title">fpow</span><span class="params">(type a, type b, type mod)</span> </span>&#123; <span class="keyword">if</span> (b &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; type res = <span class="number">1</span>; <span class="keyword">while</span> (b) &#123; <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (res * a) % mod; a = (a * a) % mod; b &gt;&gt;= <span class="number">1</span>; &#125;<span class="keyword">return</span> res; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> type&gt;<span class="function">type <span class="title">fpow</span><span class="params">(type a, type b)</span> </span>&#123; <span class="keyword">if</span> (b &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; type res = <span class="number">1</span>; <span class="keyword">while</span> (b) &#123; <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res *= a; a *= a; b &gt;&gt;= <span class="number">1</span>; &#125;<span class="keyword">return</span> res; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ull maxn = <span class="number">1005</span>, base = <span class="number">233</span>, base2 = <span class="number">19260817</span>, N = <span class="number">105</span>;</span><br><span class="line">ull h[maxn][maxn], th[N], h2[maxn], s[maxn * maxn], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">mh</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll len = str.size() - <span class="number">1</span>;</span><br><span class="line">    ull res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        res = res * base + str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mh</span><span class="params">(ll k, <span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll len = str.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        h[k][i] = h[k][i - <span class="number">1</span>] * base + str[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll m, n, a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    ull b_powb = fpow(base, (ull)b), b_powa = fpow(base2, (ull)a);</span><br><span class="line">    <span class="built_in">string</span> arr;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr;</span><br><span class="line">        arr = <span class="string">&#x27; &#x27;</span> + arr;</span><br><span class="line">        mh(i, arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ll j = <span class="number">1</span>; j + b - <span class="number">1</span> &lt;= n; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l = j, r = j + b - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; ++i) h2[i] = h2[i - <span class="number">1</span>] * base2 + h[i][r] - h[i][l - <span class="number">1</span>] * b_powb;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i + a - <span class="number">1</span> &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            s[++cnt] = h2[i + a - <span class="number">1</span>] - h2[i - <span class="number">1</span>] * b_powa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(s + <span class="number">1</span>, s + <span class="number">1</span> + cnt);</span><br><span class="line">    cnt = unique(s + <span class="number">1</span>, s + <span class="number">1</span> + cnt) - s - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ll q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= a; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">            str = <span class="string">&#x27; &#x27;</span> + str;</span><br><span class="line">            th[i] = mh(str);</span><br><span class="line">        &#125;</span><br><span class="line">        ull qhash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= a; ++i) qhash = qhash * base2 + th[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (binary_search(s + <span class="number">1</span>, s + <span class="number">1</span> + cnt, qhash)) <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>牛客</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>数论模板</title>
    <url>/2020/11/09/num_theory_template/</url>
    <content><![CDATA[<h2 id="欧拉筛法"><a href="#欧拉筛法" class="headerlink" title="欧拉筛法"></a>欧拉筛法</h2><a id="more"></a>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cnt - 质数的个数</span></span><br><span class="line"><span class="comment">    maxn - 数的范围</span></span><br><span class="line"><span class="comment">    isnotpri - 非质数</span></span><br><span class="line"><span class="comment">    pri - 储存质数</span></span><br><span class="line"><span class="comment">    minprifactor - 数i的最小质因数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt; maxn; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isnotpri[i]) pri[cnt++] = i, minprifactor[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * pri[j] &lt; maxn; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            minprifactor[i * pri[j]] = pri[j];</span><br><span class="line">            isnotpri[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % pri[j])) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="唯一分解定理"><a href="#唯一分解定理" class="headerlink" title="唯一分解定理"></a>唯一分解定理</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; pri[i] * pri[i] &lt;= x; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(x % pri[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            ll cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(x % pri[i])) ++cnt, x /= pri[i];</span><br><span class="line">            factor.push_back(&#123; pri[i],cnt &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) factor.push_back(&#123; x,<span class="number">1</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="卢卡斯定理"><a href="#卢卡斯定理" class="headerlink" title="卢卡斯定理"></a>卢卡斯定理</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">comb</span><span class="params">(ll n, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (((frac[n] * getInv(frac[r], p)) % p) * getInv(frac[n - r], p)) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (comb(n % p, r % p) * lucas(n / p, r / p)) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线性求逆元"><a href="#线性求逆元" class="headerlink" title="线性求逆元"></a>线性求逆元</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">inv[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    inv[i] = ((p - p / i) * inv[p % i]) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/10/20/test/</url>
    <content><![CDATA[<p>我的第一个post</p>
]]></content>
  </entry>
  <entry>
    <title>Educational Codeforces Round 100 - C - Busy Robot</title>
    <url>/2020/12/19/cf1463-c/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://codeforces.com/contest/1463/problem/C">https://codeforces.com/contest/1463/problem/C</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>模拟，设$nowpos$为当前时刻的位置，$nextpos$为下一时刻的位置，如果对于第$i$个命令，存在$nowpos\leq pos_i\leq nextpos$或$nextpos\leq pos_i\leq nowpos$（反方向移动时），则这一命令为有效命令。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line">ll n, t[maxn], pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t[i] &gt;&gt; pos[i];</span><br><span class="line">        t[n + <span class="number">1</span>] = <span class="number">1e18</span>;</span><br><span class="line">        ll nowpos = <span class="number">0</span>, t_ = <span class="number">0</span>, dir = <span class="number">0</span>, ind = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t_ &lt;= t[i]) t_ += <span class="built_in">abs</span>(nowpos - pos[i]) + <span class="built_in">abs</span>(t_ - t[i]), dir = pos[i] - nowpos, ind = i;</span><br><span class="line">            ll nextpos;</span><br><span class="line">            <span class="keyword">if</span> (dir &gt; <span class="number">0</span>) nextpos = min(nowpos + t[i + <span class="number">1</span>] - t[i], pos[ind]);</span><br><span class="line">            <span class="keyword">else</span> nextpos = max(nowpos + t[i] - t[i + <span class="number">1</span>], pos[ind]);</span><br><span class="line">            <span class="keyword">if</span> ((nowpos &lt;= pos[i] &amp;&amp; pos[i] &lt;= nextpos) || (nextpos &lt;= pos[i] &amp;&amp; pos[i] &lt;= nowpos)) ++ans;</span><br><span class="line">            nowpos = nextpos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cf</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 691 - C - Row GCD</title>
    <url>/2020/12/19/cf1459-c/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://codeforces.com/contest/1459/problem/C">https://codeforces.com/contest/1459/problem/C</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>差分gcd，利用结论（这个结论非常重要）<br>$\gcd(a_1,a_2,a_3,\cdots,a_{n-1},a_n)=\gcd(a_1,a_2-a_1,a_3-a_2,\cdots,a_{n-1}-a_{n-2},a_n-a_{n-1})$计算<br>根据差分的性质，对整个序列加上$k$时，只需对$a_1\leftarrow a_1+k$和$a_{n+1}\leftarrow a_{n+1}-k$即可</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line">ll a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (ll i = n; i &gt; <span class="number">0</span>; --i) a[i] -= a[i - <span class="number">1</span>], a[i] = <span class="built_in">abs</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= n; ++i) ans = __gcd(ans, a[i]);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cout</span> &lt;&lt; __gcd(ans, a[<span class="number">1</span>] + b[i]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cf</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU 2089 - 不要62</title>
    <url>/2020/12/21/hdu2089/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2089">http://acm.hdu.edu.cn/showproblem.php?pid=2089</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>数位dp经典模板题，建议学习</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">20</span>][<span class="number">2</span>], a[<span class="number">20</span>];</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll pos, ll sta, <span class="keyword">bool</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!limit &amp;&amp; dp[pos][sta] != <span class="number">-1</span>) <span class="keyword">return</span> dp[pos][sta];</span><br><span class="line">    ll up = limit ? a[pos] : <span class="number">9</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt;= up; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sta &amp;&amp; i == <span class="number">2</span>) <span class="keyword">continue</span>;<span class="comment">//上一位是6，当前位是2</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>) <span class="keyword">continue</span>;<span class="comment">//当前位是4</span></span><br><span class="line">        ans += dfs(pos - <span class="number">1</span>, i == <span class="number">6</span>, limit &amp;&amp; i == a[pos]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!limit) dp[pos][sta] = ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        a[++pos] = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(pos, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, m;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == m &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solve(m) - solve(n - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>dp</tag>
        <tag>hdu</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 103 - C - Longest Simple Cycle</title>
    <url>/2021/01/30/cf1476-c/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a>
<p><a href="https://codeforces.com/contest/1476/problem/C">https://codeforces.com/contest/1476/problem/C</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>设$dp(i,j)$，$i$表示第$i$条链，$j$表示是否和第$i-1$条链连接，0表示不连接，1表示连接<br>考虑不连接的情况，对于第$i$条链，显然当前状态由第$i-1$条链的状态直接转移，即$dp(i,0)\leftarrow\max(dp(i-1,0),dp(i-1,1))$<br>考虑连接的情况，有三种转移方程：<br>当$a_i=b_i$时，只能从第$i$条链向左出发，到$i-1$返回，此时状态转移方程为$dp(i,1)\leftarrow c_i-1+2$<br>当$a_i\not=b_i$且$i-1=1$，此时与第一种情况一样，状态转移方程为$dp(i,1)\leftarrow dp(i-1,1)+2+c_i-1$<br>当$a_i\not=b_i$且$i-1\not=1$，此时的路径可能到$i-1$返回，也有可能到$i-2$、$i-3$返回等等，考虑到最优子结构，$i-2$、$i-3$以及后面的这些情况已经被最优选择，所以只需考虑$i-1$返回和非$i-1$返回的情况即可<br>此时的状态转移方程为$dp(i,1)\leftarrow\max(dp(i-1,1)-\vert a_i-b_i\vert+2+c_i-1,\vert a_i-b_i\vert+2+c_i-1)$</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO</span> &#123;</span> _IO() &#123; ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); &#125; &#125;_io;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld; <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">1e5</span> + <span class="number">5</span>;;</span><br><span class="line">ll a[maxn], b[maxn], c[maxn], dp[maxn][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">abs</span>(a[<span class="number">2</span>] - b[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][<span class="number">1</span>] = c[i] - <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> == <span class="number">1</span>) dp[i][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">1</span>] + <span class="number">2</span> + c[i] - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][<span class="number">1</span>] = max(dp[i - <span class="number">1</span>][<span class="number">1</span>] - <span class="built_in">abs</span>(a[i] - b[i]) + <span class="number">2</span> + c[i] - <span class="number">1</span>, <span class="built_in">abs</span>(a[i] - b[i]) + <span class="number">2</span> + c[i] - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; max(dp[n][<span class="number">0</span>], dp[n][<span class="number">1</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>cf</tag>
        <tag>dp</tag>
      </tags>
  </entry>
</search>
